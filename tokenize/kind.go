package tokenize

/*------------------------------------------------------------------------------
 * Token Kind
 *----------------------------------------------------------------------------*/

//go:generate stringer -type Kind --output kind_string.go
type Kind uint8

const (
	Invalid Kind = 0

	Actions Kind = 1 + iota

	/*----------------------------------------------------------------------------
	 * Composite Actions
	 *--------------------------------------------------------------------------*/

	RunActionList
	CallActionList
	InvokeExternalBuff

	/*----------------------------------------------------------------------------
	 * Globals
	 *--------------------------------------------------------------------------*/

	ActiveEnemies
	Time
	FightRemains
	Toggle
	SnapshotStats

	Rage

	/*----------------------------------------------------------------------------
	 * Data Tables
	 *--------------------------------------------------------------------------*/

	Buff
	Debuff
	Cooldown
	Talent
	Target
	DOT
	RaidEvent
	Movement
	Equipped
	GCD
	Trinket

	If
	TargetIf
	Name
	VALUE
	Condition
	ValueElse
	Slot
	Op

	UseItem
	Variable

	Health
	Casting
	Proc
	Adds
	HasBuff
	HasStat

	Distance
	React
	Is
	AutoAttack
	Remains
	RemainsExpected
	Duration
	Stack
	Enabled
	Rank
	Ready
	Up
	Down
	Pct
	In
	Exists
	TTD
	CastTime
	HasUseBuff
	HasCooldown

	On    // on
	Off   // off
	SetIf // set_if

	AnyDPS
	Strength

	/*----------------------------------------------------------------------------
	 * Equipment
	 *--------------------------------------------------------------------------*/

	Trinket1
	Trinket2
	MainHand
	OffHand

	/*------------------------------------------------------------------------------
	 * Builtins
	 *----------------------------------------------------------------------------*/

	Min   // min
	Floor // floor
	Ceil  // ceil

	/*----------------------------------------------------------------------------
	 * Logic Operators
	 *--------------------------------------------------------------------------*/

	Not        // !
	LogicalOr  // |
	LogicalAnd // &

	/*----------------------------------------------------------------------------
	 * Comparison Operators
	 *--------------------------------------------------------------------------*/

	GE // >=
	GT // >
	LE // <=
	LT // >
	NE // !=

	/*----------------------------------------------------------------------------
	 * Arithmetic Operators
	 *--------------------------------------------------------------------------*/

	Mod     // %%
	Mult    // *
	Div     // %
	Add     // +
	Sub     // -
	Abs     // @
	MathMax // <?
	MathMin // >?

	/*----------------------------------------------------------------------------
	 * Bitwise Operators
	 *--------------------------------------------------------------------------*/

	XOr // ^

	/*------------------------------------------------------------------------------
	 * Assignment Operators
	 *----------------------------------------------------------------------------*/

	Assign    // =
	AddAssign // +=/

	/*----------------------------------------------------------------------------
	 * Misc Symbols
	 *--------------------------------------------------------------------------*/

	ParenL     // (
	ParenR     // )
	Octothorpe // #
	Colon      // :
	Comma      // ,
	Accessor   // .

	/*------------------------------------------------------------------------------
	 * Base Value
	 *----------------------------------------------------------------------------*/

	Num
	ID
)
